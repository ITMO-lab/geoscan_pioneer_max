// Generated by gencpp from file gs_vision/QR.msg
// DO NOT EDIT!


#ifndef GS_VISION_MESSAGE_QR_H
#define GS_VISION_MESSAGE_QR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gs_vision
{
template <class ContainerAllocator>
struct QR_
{
  typedef QR_<ContainerAllocator> Type;

  QR_()
    : data()
    , left(0)
    , top(0)
    , width(0)
    , height(0)
    , x1(0)
    , y1(0)
    , x2(0)
    , y2(0)
    , x3(0)
    , y3(0)
    , x4(0)
    , y4(0)  {
    }
  QR_(const ContainerAllocator& _alloc)
    : data(_alloc)
    , left(0)
    , top(0)
    , width(0)
    , height(0)
    , x1(0)
    , y1(0)
    , x2(0)
    , y2(0)
    , x3(0)
    , y3(0)
    , x4(0)
    , y4(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _data_type;
  _data_type data;

   typedef int32_t _left_type;
  _left_type left;

   typedef int32_t _top_type;
  _top_type top;

   typedef int32_t _width_type;
  _width_type width;

   typedef int32_t _height_type;
  _height_type height;

   typedef int32_t _x1_type;
  _x1_type x1;

   typedef int32_t _y1_type;
  _y1_type y1;

   typedef int32_t _x2_type;
  _x2_type x2;

   typedef int32_t _y2_type;
  _y2_type y2;

   typedef int32_t _x3_type;
  _x3_type x3;

   typedef int32_t _y3_type;
  _y3_type y3;

   typedef int32_t _x4_type;
  _x4_type x4;

   typedef int32_t _y4_type;
  _y4_type y4;





  typedef boost::shared_ptr< ::gs_vision::QR_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gs_vision::QR_<ContainerAllocator> const> ConstPtr;

}; // struct QR_

typedef ::gs_vision::QR_<std::allocator<void> > QR;

typedef boost::shared_ptr< ::gs_vision::QR > QRPtr;
typedef boost::shared_ptr< ::gs_vision::QR const> QRConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gs_vision::QR_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gs_vision::QR_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace gs_vision

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsMessage': True, 'IsFixedSize': False, 'HasHeader': False}
// {'gs_vision': ['/home/ubuntu/geoscan_ws/src/gs_vision/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsMessage< ::gs_vision::QR_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gs_vision::QR_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gs_vision::QR_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gs_vision::QR_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gs_vision::QR_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gs_vision::QR_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gs_vision::QR_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5ccd7767be668dc7e18c0eabb4d47340";
  }

  static const char* value(const ::gs_vision::QR_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5ccd7767be668dc7ULL;
  static const uint64_t static_value2 = 0xe18c0eabb4d47340ULL;
};

template<class ContainerAllocator>
struct DataType< ::gs_vision::QR_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gs_vision/QR";
  }

  static const char* value(const ::gs_vision::QR_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gs_vision::QR_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string data\n"
"int32 left\n"
"int32 top\n"
"int32 width\n"
"int32 height\n"
"int32 x1\n"
"int32 y1\n"
"int32 x2\n"
"int32 y2\n"
"int32 x3\n"
"int32 y3\n"
"int32 x4\n"
"int32 y4\n"
;
  }

  static const char* value(const ::gs_vision::QR_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gs_vision::QR_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
      stream.next(m.left);
      stream.next(m.top);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.x1);
      stream.next(m.y1);
      stream.next(m.x2);
      stream.next(m.y2);
      stream.next(m.x3);
      stream.next(m.y3);
      stream.next(m.x4);
      stream.next(m.y4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct QR_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gs_vision::QR_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gs_vision::QR_<ContainerAllocator>& v)
  {
    s << indent << "data: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.data);
    s << indent << "left: ";
    Printer<int32_t>::stream(s, indent + "  ", v.left);
    s << indent << "top: ";
    Printer<int32_t>::stream(s, indent + "  ", v.top);
    s << indent << "width: ";
    Printer<int32_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.height);
    s << indent << "x1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x1);
    s << indent << "y1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y1);
    s << indent << "x2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x2);
    s << indent << "y2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y2);
    s << indent << "x3: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x3);
    s << indent << "y3: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y3);
    s << indent << "x4: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x4);
    s << indent << "y4: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GS_VISION_MESSAGE_QR_H
