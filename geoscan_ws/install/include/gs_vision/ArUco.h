// Generated by gencpp from file gs_vision/ArUco.msg
// DO NOT EDIT!


#ifndef GS_VISION_MESSAGE_ARUCO_H
#define GS_VISION_MESSAGE_ARUCO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gs_vision
{
template <class ContainerAllocator>
struct ArUco_
{
  typedef ArUco_<ContainerAllocator> Type;

  ArUco_()
    : id(0)
    , x1(0.0)
    , y1(0.0)
    , x2(0.0)
    , y2(0.0)
    , x3(0.0)
    , y3(0.0)
    , x4(0.0)
    , y4(0.0)  {
    }
  ArUco_(const ContainerAllocator& _alloc)
    : id(0)
    , x1(0.0)
    , y1(0.0)
    , x2(0.0)
    , y2(0.0)
    , x3(0.0)
    , y3(0.0)
    , x4(0.0)
    , y4(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef float _x1_type;
  _x1_type x1;

   typedef float _y1_type;
  _y1_type y1;

   typedef float _x2_type;
  _x2_type x2;

   typedef float _y2_type;
  _y2_type y2;

   typedef float _x3_type;
  _x3_type x3;

   typedef float _y3_type;
  _y3_type y3;

   typedef float _x4_type;
  _x4_type x4;

   typedef float _y4_type;
  _y4_type y4;





  typedef boost::shared_ptr< ::gs_vision::ArUco_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gs_vision::ArUco_<ContainerAllocator> const> ConstPtr;

}; // struct ArUco_

typedef ::gs_vision::ArUco_<std::allocator<void> > ArUco;

typedef boost::shared_ptr< ::gs_vision::ArUco > ArUcoPtr;
typedef boost::shared_ptr< ::gs_vision::ArUco const> ArUcoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gs_vision::ArUco_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gs_vision::ArUco_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace gs_vision

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsMessage': True, 'IsFixedSize': True, 'HasHeader': False}
// {'gs_vision': ['/home/ubuntu/geoscan_ws/src/gs_vision/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsMessage< ::gs_vision::ArUco_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gs_vision::ArUco_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gs_vision::ArUco_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gs_vision::ArUco_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gs_vision::ArUco_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gs_vision::ArUco_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gs_vision::ArUco_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff71f5d1a26d3c62e05bc20979c78be2";
  }

  static const char* value(const ::gs_vision::ArUco_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xff71f5d1a26d3c62ULL;
  static const uint64_t static_value2 = 0xe05bc20979c78be2ULL;
};

template<class ContainerAllocator>
struct DataType< ::gs_vision::ArUco_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gs_vision/ArUco";
  }

  static const char* value(const ::gs_vision::ArUco_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gs_vision::ArUco_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n"
"float32 x1\n"
"float32 y1\n"
"float32 x2\n"
"float32 y2\n"
"float32 x3\n"
"float32 y3\n"
"float32 x4\n"
"float32 y4\n"
;
  }

  static const char* value(const ::gs_vision::ArUco_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gs_vision::ArUco_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.x1);
      stream.next(m.y1);
      stream.next(m.x2);
      stream.next(m.y2);
      stream.next(m.x3);
      stream.next(m.y3);
      stream.next(m.x4);
      stream.next(m.y4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArUco_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gs_vision::ArUco_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gs_vision::ArUco_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "x1: ";
    Printer<float>::stream(s, indent + "  ", v.x1);
    s << indent << "y1: ";
    Printer<float>::stream(s, indent + "  ", v.y1);
    s << indent << "x2: ";
    Printer<float>::stream(s, indent + "  ", v.x2);
    s << indent << "y2: ";
    Printer<float>::stream(s, indent + "  ", v.y2);
    s << indent << "x3: ";
    Printer<float>::stream(s, indent + "  ", v.x3);
    s << indent << "y3: ";
    Printer<float>::stream(s, indent + "  ", v.y3);
    s << indent << "x4: ";
    Printer<float>::stream(s, indent + "  ", v.x4);
    s << indent << "y4: ";
    Printer<float>::stream(s, indent + "  ", v.y4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GS_VISION_MESSAGE_ARUCO_H
