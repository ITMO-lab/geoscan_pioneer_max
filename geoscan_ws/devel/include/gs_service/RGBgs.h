// Generated by gencpp from file gs_service/RGBgs.msg
// DO NOT EDIT!


#ifndef GS_SERVICE_MESSAGE_RGBGS_H
#define GS_SERVICE_MESSAGE_RGBGS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gs_service
{
template <class ContainerAllocator>
struct RGBgs_
{
  typedef RGBgs_<ContainerAllocator> Type;

  RGBgs_()
    : r(false)
    , g(false)
    , b(false)  {
    }
  RGBgs_(const ContainerAllocator& _alloc)
    : r(false)
    , g(false)
    , b(false)  {
  (void)_alloc;
    }



   typedef uint8_t _r_type;
  _r_type r;

   typedef uint8_t _g_type;
  _g_type g;

   typedef uint8_t _b_type;
  _b_type b;





  typedef boost::shared_ptr< ::gs_service::RGBgs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gs_service::RGBgs_<ContainerAllocator> const> ConstPtr;

}; // struct RGBgs_

typedef ::gs_service::RGBgs_<std::allocator<void> > RGBgs;

typedef boost::shared_ptr< ::gs_service::RGBgs > RGBgsPtr;
typedef boost::shared_ptr< ::gs_service::RGBgs const> RGBgsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gs_service::RGBgs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gs_service::RGBgs_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace gs_service

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsMessage': True, 'IsFixedSize': True, 'HasHeader': False}
// {'gs_service': ['/home/ubuntu/geoscan_ws/src/gs_service/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsMessage< ::gs_service::RGBgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gs_service::RGBgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gs_service::RGBgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gs_service::RGBgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gs_service::RGBgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gs_service::RGBgs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gs_service::RGBgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3d6da4aa340747776b1263dbf87c67c6";
  }

  static const char* value(const ::gs_service::RGBgs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3d6da4aa34074777ULL;
  static const uint64_t static_value2 = 0x6b1263dbf87c67c6ULL;
};

template<class ContainerAllocator>
struct DataType< ::gs_service::RGBgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gs_service/RGBgs";
  }

  static const char* value(const ::gs_service::RGBgs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gs_service::RGBgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool r\n"
"bool g\n"
"bool b\n"
;
  }

  static const char* value(const ::gs_service::RGBgs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gs_service::RGBgs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.r);
      stream.next(m.g);
      stream.next(m.b);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RGBgs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gs_service::RGBgs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gs_service::RGBgs_<ContainerAllocator>& v)
  {
    s << indent << "r: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.r);
    s << indent << "g: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.g);
    s << indent << "b: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.b);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GS_SERVICE_MESSAGE_RGBGS_H
