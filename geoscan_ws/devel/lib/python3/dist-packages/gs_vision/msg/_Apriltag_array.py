# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gs_vision/Apriltag_array.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import gs_vision.msg

class Apriltag_array(genpy.Message):
  _md5sum = "f777b1339459d8299ae58a3a829f16d7"
  _type = "gs_vision/Apriltag_array"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Apriltag[] apriltags
================================================================================
MSG: gs_vision/Apriltag
string tag_family
int32 tag_id
int32 hamming
float32 goodness
float32 decision_margin
float32 center_x
float32 center_y
float32 x1
float32 y1
float32 x2
float32 y2
float32 x3
float32 y3
float32 x4
float32 y4"""
  __slots__ = ['apriltags']
  _slot_types = ['gs_vision/Apriltag[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       apriltags

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Apriltag_array, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.apriltags is None:
        self.apriltags = []
    else:
      self.apriltags = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.apriltags)
      buff.write(_struct_I.pack(length))
      for val1 in self.apriltags:
        _x = val1.tag_family
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_2i12f().pack(_x.tag_id, _x.hamming, _x.goodness, _x.decision_margin, _x.center_x, _x.center_y, _x.x1, _x.y1, _x.x2, _x.y2, _x.x3, _x.y3, _x.x4, _x.y4))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.apriltags is None:
        self.apriltags = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.apriltags = []
      for i in range(0, length):
        val1 = gs_vision.msg.Apriltag()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.tag_family = str[start:end].decode('utf-8')
        else:
          val1.tag_family = str[start:end]
        _x = val1
        start = end
        end += 56
        (_x.tag_id, _x.hamming, _x.goodness, _x.decision_margin, _x.center_x, _x.center_y, _x.x1, _x.y1, _x.x2, _x.y2, _x.x3, _x.y3, _x.x4, _x.y4,) = _get_struct_2i12f().unpack(str[start:end])
        self.apriltags.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.apriltags)
      buff.write(_struct_I.pack(length))
      for val1 in self.apriltags:
        _x = val1.tag_family
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_2i12f().pack(_x.tag_id, _x.hamming, _x.goodness, _x.decision_margin, _x.center_x, _x.center_y, _x.x1, _x.y1, _x.x2, _x.y2, _x.x3, _x.y3, _x.x4, _x.y4))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.apriltags is None:
        self.apriltags = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.apriltags = []
      for i in range(0, length):
        val1 = gs_vision.msg.Apriltag()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.tag_family = str[start:end].decode('utf-8')
        else:
          val1.tag_family = str[start:end]
        _x = val1
        start = end
        end += 56
        (_x.tag_id, _x.hamming, _x.goodness, _x.decision_margin, _x.center_x, _x.center_y, _x.x1, _x.y1, _x.x2, _x.y2, _x.x3, _x.y3, _x.x4, _x.y4,) = _get_struct_2i12f().unpack(str[start:end])
        self.apriltags.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i12f = None
def _get_struct_2i12f():
    global _struct_2i12f
    if _struct_2i12f is None:
        _struct_2i12f = struct.Struct("<2i12f")
    return _struct_2i12f
